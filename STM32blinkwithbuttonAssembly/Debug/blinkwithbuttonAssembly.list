
blinkwithbuttonAssembly.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000017c  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000310  08000310  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000310  08000310  0000200c  2**0
                  CONTENTS
  4 .ARM          00000000  08000310  08000310  0000200c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000310  08000310  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000310  08000310  00001310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000314  08000314  00001314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08000318  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  2000000c  08000324  0000200c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  08000324  00002028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000200c  2**0
                  CONTENTS, READONLY
 12 .debug_line   000000f7  00000000  00000000  0000203c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 00000066  00000000  00000000  00002133  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   00000055  00000000  00000000  00002199  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000038  00000000  00000000  000021ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000048  00000000  00000000  00002228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00000082  00000000  00000000  00002270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000019  00000000  00000000  000022f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  0000002c  00000000  00000000  0000230c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080002f8 	.word	0x080002f8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	080002f8 	.word	0x080002f8

080001d4 <main>:
.section .text
.global main

main:
    @ Habilita clock para GPIOA, GPIOC
    LDR R0, =RCC_AHB1ENR
 80001d4:	4819      	ldr	r0, [pc, #100]	@ (800023c <continue_loop+0x4>)
    LDR R1, [R0]
 80001d6:	6801      	ldr	r1, [r0, #0]
    ORR R1, R1, #(1 << 0)  @ GPIOA
 80001d8:	f041 0101 	orr.w	r1, r1, #1
    ORR R1, R1, #(1 << 2)  @ GPIOC
 80001dc:	f041 0104 	orr.w	r1, r1, #4
    STR R1, [R0]
 80001e0:	6001      	str	r1, [r0, #0]

    LDR R0, =RCC_APB2ENR
 80001e2:	4817      	ldr	r0, [pc, #92]	@ (8000240 <continue_loop+0x8>)
    LDR R1, [R0]
 80001e4:	6801      	ldr	r1, [r0, #0]
    ORR R1, R1, #(1 << 14) @ SYSCFG
 80001e6:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
    STR R1, [R0]
 80001ea:	6001      	str	r1, [r0, #0]

    @ Configura PA0, PA1, PA4, PA5, PA6, PA7 como saída (LEDs)
    LDR R0, =GPIOA_MODER
 80001ec:	4815      	ldr	r0, [pc, #84]	@ (8000244 <continue_loop+0xc>)
    LDR R1, [R0]
 80001ee:	6801      	ldr	r1, [r0, #0]
    BIC R1, R1, #0x0000FF00  @ Limpa os bits que não queremos mexer
 80001f0:	f421 417f 	bic.w	r1, r1, #65280	@ 0xff00
    ORR R1, R1, #0x00005500  @ Configura PA0, PA1, PA4, PA5, PA6, PA7 como saída
 80001f4:	f441 41aa 	orr.w	r1, r1, #21760	@ 0x5500
    STR R1, [R0]
 80001f8:	6001      	str	r1, [r0, #0]

    @ Inicializa LEDs desligados
    LDR R0, =GPIOA_ODR
 80001fa:	4813      	ldr	r0, [pc, #76]	@ (8000248 <continue_loop+0x10>)
    MOV R1, #0
 80001fc:	f04f 0100 	mov.w	r1, #0
    STR R1, [R0]
 8000200:	6001      	str	r1, [r0, #0]

    @ Configura PC13 como entrada (botão)
    LDR R0, =GPIOC_MODER
 8000202:	4812      	ldr	r0, [pc, #72]	@ (800024c <continue_loop+0x14>)
    LDR R1, [R0]
 8000204:	6801      	ldr	r1, [r0, #0]
    BIC R1, R1, #(3 << (13 * 2))  @ Limpa bits de PC13
 8000206:	f021 6140 	bic.w	r1, r1, #201326592	@ 0xc000000
    STR R1, [R0]
 800020a:	6001      	str	r1, [r0, #0]

0800020c <loop>:

    @ Loop principal
loop:
    @ Debounce
    LDR R4, =debounce_count
 800020c:	4c10      	ldr	r4, [pc, #64]	@ (8000250 <continue_loop+0x18>)
    LDR R5, [R4]
 800020e:	6825      	ldr	r5, [r4, #0]

    @ Lê estado atual do botão
    LDR R0, =GPIOC_IDR
 8000210:	4810      	ldr	r0, [pc, #64]	@ (8000254 <continue_loop+0x1c>)
    LDR R1, [R0]
 8000212:	6801      	ldr	r1, [r0, #0]
    TST R1, #(1 << 13)  @ Verifica se o botão está pressionado
 8000214:	f411 5f00 	tst.w	r1, #8192	@ 0x2000
    BNE reset_debounce  @ Se não pressionado, resetar o debounce
 8000218:	d10b      	bne.n	8000232 <reset_debounce>

    @ Incrementa contador de debounce
    ADD R5, R5, #1
 800021a:	f105 0501 	add.w	r5, r5, #1
    STR R5, [R4]
 800021e:	6025      	str	r5, [r4, #0]

    @ Verifica threshold de debounce
    LDR R0, =DEBOUNCE_THRESHOLD
 8000220:	480d      	ldr	r0, [pc, #52]	@ (8000258 <continue_loop+0x20>)
    LDR R0, [R0]
 8000222:	6800      	ldr	r0, [r0, #0]
    CMP R5, R0
 8000224:	4285      	cmp	r5, r0
    BLT continue_loop
 8000226:	db07      	blt.n	8000238 <continue_loop>

    @ Toggle LEDs
    LDR R0, =GPIOA_ODR
 8000228:	4807      	ldr	r0, [pc, #28]	@ (8000248 <continue_loop+0x10>)
    LDR R1, [R0]
 800022a:	6801      	ldr	r1, [r0, #0]
    EOR R1, R1, #0xF3  @ Alterna os LEDs
 800022c:	f081 01f3 	eor.w	r1, r1, #243	@ 0xf3
    STR R1, [R0]
 8000230:	6001      	str	r1, [r0, #0]

08000232 <reset_debounce>:

    @ Reseta contador
reset_debounce:
    MOV R5, #0
 8000232:	f04f 0500 	mov.w	r5, #0
    STR R5, [R4]
 8000236:	6025      	str	r5, [r4, #0]

08000238 <continue_loop>:

continue_loop:
    B loop
 8000238:	e7e8      	b.n	800020c <loop>
 800023a:	0000      	.short	0x0000
    LDR R0, =RCC_AHB1ENR
 800023c:	40023830 	.word	0x40023830
    LDR R0, =RCC_APB2ENR
 8000240:	40023844 	.word	0x40023844
    LDR R0, =GPIOA_MODER
 8000244:	40020000 	.word	0x40020000
    LDR R0, =GPIOA_ODR
 8000248:	40020014 	.word	0x40020014
    LDR R0, =GPIOC_MODER
 800024c:	40020800 	.word	0x40020800
    LDR R4, =debounce_count
 8000250:	20000000 	.word	0x20000000
    LDR R0, =GPIOC_IDR
 8000254:	40020810 	.word	0x40020810
    LDR R0, =DEBOUNCE_THRESHOLD
 8000258:	20000008 	.word	0x20000008

0800025c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800025c:	480d      	ldr	r0, [pc, #52]	@ (8000294 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800025e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000260:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000264:	480c      	ldr	r0, [pc, #48]	@ (8000298 <LoopForever+0x6>)
  ldr r1, =_edata
 8000266:	490d      	ldr	r1, [pc, #52]	@ (800029c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000268:	4a0d      	ldr	r2, [pc, #52]	@ (80002a0 <LoopForever+0xe>)
  movs r3, #0
 800026a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800026c:	e002      	b.n	8000274 <LoopCopyDataInit>

0800026e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800026e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000270:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000272:	3304      	adds	r3, #4

08000274 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000274:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000276:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000278:	d3f9      	bcc.n	800026e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800027a:	4a0a      	ldr	r2, [pc, #40]	@ (80002a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800027c:	4c0a      	ldr	r4, [pc, #40]	@ (80002a8 <LoopForever+0x16>)
  movs r3, #0
 800027e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000280:	e001      	b.n	8000286 <LoopFillZerobss>

08000282 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000282:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000284:	3204      	adds	r2, #4

08000286 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000286:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000288:	d3fb      	bcc.n	8000282 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800028a:	f000 f811 	bl	80002b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800028e:	f7ff ffa1 	bl	80001d4 <main>

08000292 <LoopForever>:

LoopForever:
  b LoopForever
 8000292:	e7fe      	b.n	8000292 <LoopForever>
  ldr   r0, =_estack
 8000294:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000298:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800029c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80002a0:	08000318 	.word	0x08000318
  ldr r2, =_sbss
 80002a4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80002a8:	20000028 	.word	0x20000028

080002ac <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002ac:	e7fe      	b.n	80002ac <ADC_IRQHandler>
	...

080002b0 <__libc_init_array>:
 80002b0:	b570      	push	{r4, r5, r6, lr}
 80002b2:	4d0d      	ldr	r5, [pc, #52]	@ (80002e8 <__libc_init_array+0x38>)
 80002b4:	4c0d      	ldr	r4, [pc, #52]	@ (80002ec <__libc_init_array+0x3c>)
 80002b6:	1b64      	subs	r4, r4, r5
 80002b8:	10a4      	asrs	r4, r4, #2
 80002ba:	2600      	movs	r6, #0
 80002bc:	42a6      	cmp	r6, r4
 80002be:	d109      	bne.n	80002d4 <__libc_init_array+0x24>
 80002c0:	4d0b      	ldr	r5, [pc, #44]	@ (80002f0 <__libc_init_array+0x40>)
 80002c2:	4c0c      	ldr	r4, [pc, #48]	@ (80002f4 <__libc_init_array+0x44>)
 80002c4:	f000 f818 	bl	80002f8 <_init>
 80002c8:	1b64      	subs	r4, r4, r5
 80002ca:	10a4      	asrs	r4, r4, #2
 80002cc:	2600      	movs	r6, #0
 80002ce:	42a6      	cmp	r6, r4
 80002d0:	d105      	bne.n	80002de <__libc_init_array+0x2e>
 80002d2:	bd70      	pop	{r4, r5, r6, pc}
 80002d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80002d8:	4798      	blx	r3
 80002da:	3601      	adds	r6, #1
 80002dc:	e7ee      	b.n	80002bc <__libc_init_array+0xc>
 80002de:	f855 3b04 	ldr.w	r3, [r5], #4
 80002e2:	4798      	blx	r3
 80002e4:	3601      	adds	r6, #1
 80002e6:	e7f2      	b.n	80002ce <__libc_init_array+0x1e>
 80002e8:	08000310 	.word	0x08000310
 80002ec:	08000310 	.word	0x08000310
 80002f0:	08000310 	.word	0x08000310
 80002f4:	08000314 	.word	0x08000314

080002f8 <_init>:
 80002f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002fa:	bf00      	nop
 80002fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002fe:	bc08      	pop	{r3}
 8000300:	469e      	mov	lr, r3
 8000302:	4770      	bx	lr

08000304 <_fini>:
 8000304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000306:	bf00      	nop
 8000308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800030a:	bc08      	pop	{r3}
 800030c:	469e      	mov	lr, r3
 800030e:	4770      	bx	lr
